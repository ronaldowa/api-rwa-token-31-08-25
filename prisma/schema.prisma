datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// -------------------- Usuários --------------------
model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  password   String
  createDate DateTime @default(now())
  // Relação 1:N com RegistroCompras
  registroCompras RegistroCompras[]
  // Relação 1:1 com KYC
  kyc        KYC?

  // Relação 1:N com TxMint
  txMints    TxMint[]

  // Relação 1:1 com Cart
  cart       Cart?

    // Relação 1:N com PixPayment
  pixPayments PixPayment[]
}

// -------------------- KYC --------------------
model KYC {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  cpf            String
  dataNascimento DateTime
  endereco       String
  foto           String?  // Caminho para upload da foto
  status         String   @default("inativo") // inativo, ativo, pendente
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relação 1:1 com User
  user           User     @relation(fields: [userId], references: [id])
}

// -------------------- Projetos --------------------
model Projeto {
  id               Int              @id @default(autoincrement())
  name             String
  numContrato      String           @unique
  precoTokenBRL    Float            @default(0.0)  // Valor do token em reais (BRL)
  fotos            String[]
  totalTokens      Int
  status           String           @default("ativo")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  detalhesProjeto  String
  inicioDaCapitacao DateTime
  dataRecebimento   DateTime

  // Relações
  txMints          TxMint[]
  compras          RegistroCompras[]  // <- um projeto tem várias compras
}

// -------------------- Registro de Mint --------------------
model TxMint {
  id          Int      @id @default(autoincrement())
  userId      Int
  projetoId   Int
  amount      Float
  toAddress   String
  txHash      String   @unique
  status      String   @default("pendente")
  createdAt   DateTime @default(now())
  confirmedAt DateTime?

  // Relação com User
  user        User     @relation(fields: [userId], references: [id])
  
  // Relação com Projeto
  projeto     Projeto  @relation(fields: [projetoId], references: [id])

  @@index([userId])
  @@index([projetoId])
}

model Cart {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  privateKey    String
  publicAddress String?  // opcional
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// -------------------- Registro de Compras --------------------
model RegistroCompras {
  id               Int       @id @default(autoincrement())
  userId           Int
  projetoId        Int       // FK para Projeto
  valorDaCompra    Float
  quantidadeToken  Int
  createdAt        DateTime  @default(now())
  comprovante      String    @default(dbgenerated("md5(random()::text || clock_timestamp()::text)")) 

  // Relações
  user             User      @relation(fields: [userId], references: [id])
  projeto          Projeto   @relation(fields: [projetoId], references: [id])

  @@index([userId])
  @@index([projetoId])
}


model PixPayment {
  id          Int      @id @default(autoincrement())
  userId      Int
  projetoId   Int     // FK para Projeto
  value       Float
  status      String   @default("PENDING")
  asaasId     String   @unique
  qrCode      String?
  qrCodeBase64 String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
  projeto     Projeto  @relation(fields: [projetoId], references: [id])
}